// Most of this code was made by Daniel Shiffman and was copied and modified.
// http://codingtra.in
// http://patreon.com/codingtrain
// Code for (Daniel Shiffman's part of the code): https://youtu.be/o1Ob28sF0N8
     
import processing.video.*;
Capture video;
float biggestBlob;
int blobCounter = 0;
int maxLife = 1;
color trackColor;
float threshold = 50;
float distThreshold = 25;
String infoL = "left";
String infoC = "center";
String infoR = "right";
String lastDirection = "none";

ArrayList<Blob> blobs = new ArrayList<Blob>();

void setup(){
  size(320,240);
  String[] cameras = Capture.list();
  printArray(cameras);
 // video = new Capture(this, cameras[3]);
   video = new Capture(this,320,240,"/dev/video0",15);  
  video.start();
  trackColor = color(255.0,255.0,28.0);
  //trackColor = color(132.0,132.0,21.0);      
  
}
void captureEvent(Capture video){
  video.read(); 
}
void keyPressed(){
  if (key == 'a') {
  distThreshold+=5;
  }else if (key == 'z') {
  distThreshold-=5;
  }
  if (key == 's') {
  threshold+=1;
  }else if (key == 'x'){
  threshold-=1;
  }
}
void draw() {
  video.loadPixels();
  image(video,0,0);
 
  ArrayList<Blob> currentBlobs = new ArrayList<Blob>();
 
  for (int x = 0; x < video.width; x++) {
  for (int y = 0; y < video.height; y++) {
    int loc = x + y * video.width;
    color currentColor = video.pixels[loc];
    float r1 = red(currentColor);
    float g1 = green(currentColor);
    float b1 = blue(currentColor);
    float r2 = red(trackColor);
    float g2 = green(trackColor);
    float b2 = blue(trackColor);
    
    float d = distSq(r1,g1,b1,r2,g2,b2);
    
    if (d < threshold*threshold){
      
      boolean found = false;
      for (Blob b : currentBlobs){
        
        if(b.isNear(x,y)){
          b.add(x,y);
          found = true;
          break;
        }
      }
      if(!found){
        Blob b = new Blob(x,y);
        currentBlobs.add(b);
      }
    }
  }
  }
  for (int i = currentBlobs.size()-1; i >= 0; i--) {
  if (currentBlobs.get(i).size() < 500){
    currentBlobs.remove(i);
  }
  }
 
 
  if (blobs.isEmpty() && currentBlobs.size() > 0){
  println("Adding blobs!");
  for (Blob b : currentBlobs){
    b.id = blobCounter;
    blobs.add(b);
    blobCounter++;
  }
  }else if (blobs.size() <= currentBlobs.size()){
  // match whatever blobs you can match
  for (Blob b : blobs){
    float recordD = 1000;
    Blob matched = null;
    for(Blob cb : currentBlobs){
      PVector centerB = b.getCenter();
      PVector centerCB = cb.getCenter();  
      float d = PVector.dist(centerB, centerCB);
      if (d < recordD && !cb.taken){
        recordD = d;
        matched = cb;
      }
    }
    matched.taken = true;
    b.become(matched);
    
  }
  
  // Whatever is leftover make new blobs
  for (Blob b : currentBlobs) {
    if (!b.taken) {
      b.id = blobCounter++;
      blobs.add(b);
      blobCounter++;
    }
  }
  }else if(blobs.size() > currentBlobs.size()) {
  for (Blob b : blobs) {
    b.taken = false;
  }
  //match whatever blobs you can match
  for (Blob cb : currentBlobs){
    float recordD = 1000;
    Blob matched = null;
    for(Blob b : blobs){
      PVector centerB = b.getCenter();
      PVector centerCB = cb.getCenter();  
      float d = PVector.dist(centerB, centerCB);
      if (d < recordD && !b.taken){
        recordD = d;
        matched = b;
      }
    }
    if (matched != null){
      matched.taken = true;
      matched.lifespan = maxLife;
      matched.become(cb);
    }
  }
  
  for (int i = blobs.size() - 1; i >= 0; i--){
    Blob b = blobs.get(i);
    if (!b.taken) {
      if(b.checkLife()){
        blobs.remove(i);
     }
    }
  }
  }
 
  for(Blob b : blobs){
  b.show();
  } 
 
  //textAlign(RIGHT);
  //fill(0);
  ////text(currentBlobs.size(), width-10, 40);
  ////text(blobs.size(), width-10,80);
  //textSize(24);
  //text("color threshold: " + threshold, width-10, 50);
  //text("distance threshold: " + distThreshold, width-10, 25);
  //textSize(19);
  //text("press 'a' to increase and 'z' to decrease the distance threshold", width-10, 450);
  //text("press 's' to increase and 'x' to decrease the color threshold", width-10, 470);
  
  Blob bb = null;
  for (int i = blobs.size() - 1; i >= 0; i--){
    Blob b = blobs.get(i);
    if (bb == null) {
      bb = b;
      biggestBlob = bb.maxx * bb.maxy;
      continue;
    }
    float currentPixels = 0;
    currentPixels = b.maxx * b.maxy;
    if(currentPixels > biggestBlob){
      bb = b;
      biggestBlob = currentPixels;
    }
  }
  if (blobs.size() > 0 && bb != null){
    String currentDirection = "";
    if (bb.pointX < (width/5)*2){
      currentDirection = infoL;  
    }else if (bb.pointX >= (width/5)*2 && bb.pointX <= (width/5)*3){
      currentDirection = infoC;
    }else if (bb.pointX > (width/5)*3){
      currentDirection = infoR;
    }

    PrintWriter message = createWriter("/run/visionmessage/vision-message.txt");
    message.println(currentDirection + " centerOfBlob=" + bb.pointX + ","
        + bb.pointY + " topLeftCornerOfBlob:" + bb.minx + "," + bb.miny + " ButtomRightCornerOfBlob:"
        + bb.maxy + "," + bb.maxx);
    message.flush();
    message.close();
    lastDirection = currentDirection;
    println(currentDirection);
  }
}
float distSq(float x1, float y1 ,float x2, float y2){
  float d = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);
  return d;
}
float distSq(float x1, float y1, float z1 ,float x2, float y2, float z2){
  float d = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) + (z2-z1)*(z2-z1);
  return d;
}
 
void mousePressed(){
  //save color where the mouse is clicked in trackColor variable
  int loc = mouseX + mouseY*video.width;
  trackColor = video.pixels[loc];
  println(red(trackColor), green(trackColor), blue(trackColor));
}
